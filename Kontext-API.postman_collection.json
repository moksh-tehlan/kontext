{
  "info": {
    "_postman_id": "d4b87c5e-8f2a-4c1b-9e3d-123456789abc",
    "name": "Kontext API",
    "description": "Complete API collection for Kontext application with JWT authentication, Redis-based session management, UUID entity IDs, and enhanced security features",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "123456"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Send OTP (Login/Register)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"OTP sent successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/send-otp",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "send-otp"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Login/Register with OTP",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains access token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "    ",
                  "    // Store tokens for future requests",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "    pm.environment.set('user_id', responseJson.data.user.id);",
                  "});",
                  "",
                  "pm.test(\"Login successful message\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Login successful\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"otp\": \"{{otp_code}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Google Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains access token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    pm.expect(responseJson.data).to.have.property('refreshToken');",
                  "    ",
                  "    // Store tokens for future requests",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idToken\": \"{{google_id_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/google",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "google"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Refresh Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains new access token\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    ",
                  "    // Update access token",
                  "    pm.environment.set('access_token', responseJson.data.accessToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Logout",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Logout successful\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Logout successful\");",
                  "    ",
                  "    // Clear tokens",
                  "    pm.environment.unset('access_token');",
                  "    pm.environment.unset('refresh_token');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/auth/logout",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "logout"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"User created successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"User created successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"{{new_user_first_name}}\",\n    \"lastName\": \"{{new_user_last_name}}\",\n    \"email\": \"{{new_user_email}}\",\n    \"authProvider\": \"EMAIL_OTP\",\n    \"role\": \"USER\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get All Users (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user list\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users?page=0&size=20",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User by Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/email/{{user_email}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "email",
                "{{user_email}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"User updated successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"{{updated_first_name}}\",\n    \"lastName\": \"{{updated_last_name}}\",\n    \"nickname\": \"{{updated_nickname}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify User Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Email verified successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Email verified successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/verify-email",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "verify-email"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update User Role (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"User role updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"User role updated successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{target_user_id}}/role?role=ADMIN",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{target_user_id}}",
                "role"
              ],
              "query": [
                {
                  "key": "role",
                  "value": "ADMIN"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains current user data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('email');",
                  "    pm.expect(responseJson.message).to.eql(\"Current user retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Current User Profile",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Profile updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Profile updated successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"{{updated_first_name}}\",\n    \"lastName\": \"{{updated_last_name}}\",\n    \"nickname\": \"{{updated_nickname}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete User (Admin)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"User deleted successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"User deleted successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/{{target_user_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{target_user_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Security Testing",
      "item": [
        {
          "name": "Test Token Invalidation on Login",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Store the old access token before login",
                  "pm.environment.set('old_access_token', pm.environment.get('access_token') || '');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful and new token received\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    ",
                  "    const newToken = responseJson.data.accessToken;",
                  "    const oldToken = pm.environment.get('old_access_token');",
                  "    ",
                  "    pm.expect(newToken).to.not.equal(oldToken);",
                  "    pm.environment.set('access_token', newToken);",
                  "    pm.environment.set('refresh_token', responseJson.data.refreshToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{user_email}}\",\n    \"otp\": \"{{otp_code}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/login",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "login"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Old Token Invalid After Login",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Old token should be invalid\", function () {",
                  "    // This request should fail with 401 if using old token",
                  "    if (pm.response.code === 401) {",
                  "        pm.expect(true).to.be.true; // Old token correctly invalidated",
                  "    } else {",
                  "        pm.expect.fail('Old token should have been invalidated');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{old_access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Test Token Refresh Invalidates Old Access Token",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Store current access token before refresh",
                  "pm.environment.set('pre_refresh_token', pm.environment.get('access_token'));"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Refresh successful and new access token received\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('accessToken');",
                  "    ",
                  "    const newToken = responseJson.data.accessToken;",
                  "    const oldToken = pm.environment.get('pre_refresh_token');",
                  "    ",
                  "    pm.expect(newToken).to.not.equal(oldToken);",
                  "    pm.environment.set('access_token', newToken);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"refreshToken\": \"{{refresh_token}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/auth/refresh",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "auth",
                "refresh"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Old Access Token Invalid After Refresh",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Pre-refresh token should be invalid\", function () {",
                  "    if (pm.response.code === 401) {",
                  "        pm.expect(true).to.be.true; // Old access token correctly invalidated",
                  "    } else {",
                  "        pm.expect.fail('Pre-refresh access token should have been invalidated');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{pre_refresh_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/users/me",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "me"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Project Management",
      "item": [
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Project created successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Project created successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    ",
                  "    // Store project ID for future requests",
                  "    pm.environment.set('project_id', responseJson.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{project_name}}\",\n    \"description\": \"{{project_description}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/projects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Projects (List)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains projects list\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Projects retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get User Projects (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains paginated projects\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.message).to.eql(\"Projects retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/paginated?page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "paginated"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains project data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.message).to.eql(\"Project retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Project updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Project updated successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"{{updated_project_name}}\",\n    \"description\": \"{{updated_project_description}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains search results\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Projects searched successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/search?searchTerm={{search_term}}&page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "search"
              ],
              "query": [
                {
                  "key": "searchTerm",
                  "value": "{{search_term}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"Project deleted successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Project deleted successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Knowledge Management",
      "item": [
        {
          "name": "Upload File Knowledge (Image/Document)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"File knowledge uploaded successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"File knowledge uploaded successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('type');",
                  "    pm.expect(responseJson.data).to.have.property('source');",
                  "    ",
                  "    // Store knowledge ID for future requests",
                  "    pm.environment.set('knowledge_id', responseJson.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": []
                }
              ]
            },
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/upload",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "upload"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Web Knowledge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Web knowledge created successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Web knowledge created successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data.type).to.eql(\"WEB\");",
                  "    pm.expect(responseJson.data).to.have.property('source');",
                  "    ",
                  "    // Store knowledge ID for future requests",
                  "    pm.environment.set('web_knowledge_id', responseJson.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"webUrl\": \"{{web_url}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/web",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "web"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project Knowledge (List)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains knowledge list\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge items retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project Knowledge (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains paginated knowledge\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge items retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/paginated?page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "paginated"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Knowledge by Type - Images",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains image knowledge\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge items retrieved successfully\");",
                  "    ",
                  "    // Check that all items are IMAGE type",
                  "    responseJson.data.forEach(item => {",
                  "        pm.expect(item.type).to.eql(\"IMAGE\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/type/IMAGE",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "type",
                "IMAGE"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Knowledge by Type - Documents",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains document knowledge\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge items retrieved successfully\");",
                  "    ",
                  "    // Check that all items are DOCUMENT type",
                  "    responseJson.data.forEach(item => {",
                  "        pm.expect(item.type).to.eql(\"DOCUMENT\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/type/DOCUMENT",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "type",
                "DOCUMENT"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Knowledge by Type - Web",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains web knowledge\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge items retrieved successfully\");",
                  "    ",
                  "    // Check that all items are WEB type",
                  "    responseJson.data.forEach(item => {",
                  "        pm.expect(item.type).to.eql(\"WEB\");",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/type/WEB",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "type",
                "WEB"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Knowledge by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains knowledge data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('name');",
                  "    pm.expect(responseJson.data).to.have.property('type');",
                  "    pm.expect(responseJson.data).to.have.property('source');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/{{knowledge_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "{{knowledge_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Knowledge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains search results\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge search completed successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/search?searchTerm={{knowledge_search_term}}&page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "search"
              ],
              "query": [
                {
                  "key": "searchTerm",
                  "value": "{{knowledge_search_term}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Knowledge",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"Knowledge deleted successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Knowledge deleted successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/projects/{{project_id}}/knowledge/{{knowledge_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "projects",
                "{{project_id}}",
                "knowledge",
                "{{knowledge_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Chat Management",
      "item": [
        {
          "name": "Create Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Chat created successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Chat created successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    ",
                  "    // Store chat ID for future requests",
                  "    pm.environment.set('chat_id', responseJson.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{chat_title}}\",\n    \"projectId\": \"{{project_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/chats",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project Chats (List)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains chats list\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Chats retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/project/{{project_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "project",
                "{{project_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Project Chats (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains paginated chats\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "    pm.expect(responseJson.message).to.eql(\"Chats retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/project/{{project_id}}/paginated?page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "project",
                "{{project_id}}",
                "paginated"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chat by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains chat data\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "    pm.expect(responseJson.data).to.have.property('title');",
                  "    pm.expect(responseJson.message).to.eql(\"Chat retrieved successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Chat updated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Chat updated successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('id');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"{{updated_chat_title}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete Chat",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test(\"Chat deleted successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Chat deleted successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Search Chats",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains search results\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.message).to.eql(\"Chats searched successfully\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/project/{{project_id}}/search?searchTerm={{chat_search_term}}&page=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "project",
                "{{project_id}}",
                "search"
              ],
              "query": [
                {
                  "key": "searchTerm",
                  "value": "{{chat_search_term}}"
                },
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chat History",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Chat history retrieved successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Chat history retrieved successfully\");",
                  "    pm.expect(responseJson.data).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}/history",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}",
                "history"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Chat History (Paginated)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Chat history retrieved successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"Chat history retrieved successfully\");",
                  "    pm.expect(responseJson.data).to.have.property('content');",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data).to.have.property('totalElements');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}/history/paginated?page=0&size=20",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}",
                "history",
                "paginated"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "20"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Chat with AI (RAG)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"AI response generated successfully\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.message).to.eql(\"AI chat response generated successfully\");",
                  "    pm.expect(responseJson.data).to.be.a('string');",
                  "    pm.expect(responseJson.data.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{access_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"query\": \"{{ai_chat_query}}\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/chats/{{chat_id}}/chat",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "chats",
                "{{chat_id}}",
                "chat"
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Health & Monitoring",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Application is UP\", function () {",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.status).to.eql(\"UP\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{management_url}}/health",
              "host": [
                "{{management_url}}"
              ],
              "path": [
                "health"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Application Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{management_url}}/info",
              "host": [
                "{{management_url}}"
              ],
              "path": [
                "info"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{management_url}}/metrics",
              "host": [
                "{{management_url}}"
              ],
              "path": [
                "metrics"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{access_token}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-refresh token if expired",
          "const accessToken = pm.environment.get('access_token');",
          "const refreshToken = pm.environment.get('refresh_token');",
          "",
          "if (accessToken && refreshToken) {",
          "    // Check if token is close to expiry (simplified check)",
          "    const currentTime = Math.floor(Date.now() / 1000);",
          "    const tokenTime = pm.environment.get('token_time');",
          "    ",
          "    if (tokenTime && (currentTime - tokenTime) > 600) { // 10 minutes",
          "        console.log('Token might be expired, consider refreshing');",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to check response format",
          "pm.test(\"Response time is less than 5000ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test(\"Response has proper JSON format\", function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}